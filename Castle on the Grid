#include <bits/stdc++.h>

using namespace std;

string ltrim(const string &);
string rtrim(const string &);
vector<string> split(const string &);

int minimumMoves(vector<string> grid, int startX, int startY, int goalX, int goalY) {
       vector<vector<int>> dis(grid.size(),vector<int>(grid.size(),0));
       queue<pair<int,int>> q;
       q.push({startX,startY});
       
       while (!q.empty()) {
       
       int x=q.front().first;
       int y=q.front().second;
       q.pop();
       if(x==goalX && y==goalY)
       break;
       
      for(int i=y+1;i<grid.size();i++){ //right
      if(grid[x][i]=='X')
       break;
      if(dis[x][i]==0){
          dis[x][i]=dis[x][y]+1;
          q.push({x,i});
      }
      }
      for(int i=x+1;i<grid.size();i++){ //down
      if(grid[i][y]=='X')
       break;
      if(dis[i][y]==0){
          dis[i][y]=dis[x][y]+1;
          q.push({i,y});
      } 
      }
      for(int i=y-1;i>=0;i--){ //left
      if(grid[x][i]=='X')
       break;
      if(dis[x][i]==0){
          dis[x][i]=dis[x][y]+1;
          q.push({x,i});
      }
      }
      for(int i=x-1;i>=0;i--){ //up
      if(grid[i][y]=='X')
       break;
      if(dis[i][y]==0){
          dis[i][y]=dis[x][y]+1;
          q.push({i,y});
      }
      }
         
         }
         return dis[goalX][goalY];
       
       
       
       
       
}

int main()
{
    ofstream fout(getenv("OUTPUT_PATH"));

    string n_temp;
    getline(cin, n_temp);

    int n = stoi(ltrim(rtrim(n_temp)));

    vector<string> grid(n);

    for (int i = 0; i < n; i++) {
        string grid_item;
        getline(cin, grid_item);

        grid[i] = grid_item;
    }

    string first_multiple_input_temp;
    getline(cin, first_multiple_input_temp);

    vector<string> first_multiple_input = split(rtrim(first_multiple_input_temp));

    int startX = stoi(first_multiple_input[0]);

    int startY = stoi(first_multiple_input[1]);

    int goalX = stoi(first_multiple_input[2]);

    int goalY = stoi(first_multiple_input[3]);

    int result = minimumMoves(grid, startX, startY, goalX, goalY);

    fout << result << "\n";

    fout.close();

    return 0;
}

string ltrim(const string &str) {
    string s(str);

    s.erase(
        s.begin(),
        find_if(s.begin(), s.end(), not1(ptr_fun<int, int>(isspace)))
    );

    return s;
}

string rtrim(const string &str) {
    string s(str);

    s.erase(
        find_if(s.rbegin(), s.rend(), not1(ptr_fun<int, int>(isspace))).base(),
        s.end()
    );

    return s;
}

vector<string> split(const string &str) {
    vector<string> tokens;

    string::size_type start = 0;
    string::size_type end = 0;

    while ((end = str.find(" ", start)) != string::npos) {
        tokens.push_back(str.substr(start, end - start));

        start = end + 1;
    }

    tokens.push_back(str.substr(start));

    return tokens;
}
