


/*

Given two integer arrays nums1 and nums2, return an array of their intersection. Each element in the result must appear as many times as it shows in both arrays and you may return the result in any order.

 

Example 1:

Input: nums1 = [1,2,2,1], nums2 = [2,2]
Output: [2,2]
Example 2:

Input: nums1 = [4,9,5], nums2 = [9,4,9,8,4]
Output: [4,9]
Explanation: [9,4] is also accepted.

*/


class Solution {
public:
    vector<int> intersect(vector<int>& nums1, vector<int>& nums2) {
        //Here we are using hashmap basically
        //so first of all store one array into hashmap
        //then iterate second one and just check counter if > 0 add it to the 
        // answer and decrement the count 
        int k = 0;
        unordered_map<int, int> m;
        for(auto val: nums1) {
            m[val]++;
        }
        //store count of each element in the map;
        //iterate the second one array
        for(auto val: nums2) {
            if(m[val]>0){
                nums1[k++]=val;
                --m[val];
            }
        }
        //now return nums1 array
        return vector<int>(nums1.begin(), nums1.begin()+k);
    }
};/*

Given two integer arrays nums1 and nums2, return an array of their intersection. Each element in the result must appear as many times as it shows in both arrays and you may return the result in any order.

 

Example 1:

Input: nums1 = [1,2,2,1], nums2 = [2,2]
Output: [2,2]
Example 2:

Input: nums1 = [4,9,5], nums2 = [9,4,9,8,4]
Output: [4,9]
Explanation: [9,4] is also accepted.

*/